AWSTemplateFormatVersion: "2010-09-09"

Description: JAWS DAYS 2021 Security Group Hands On

Parameters:
  VpcCidrBlock:
    Type: String
    Default: 10.255.0.0/16
  Ec2ImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  Ec2InstanceType:
    Type: String
    Default: t2.micro
  Ec2KeyName:
    Type: String
    Default: jaws-sg-key

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 0
        - !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]
      MapPublicIpOnLaunch: true # Optional
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 1
        - !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]
      MapPublicIpOnLaunch: true # Optional
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 3
        - !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]
      MapPublicIpOnLaunch: false # Optional
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 4
        - !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]
      MapPublicIpOnLaunch: false # Optional
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway # Optional
      VpcId: !Ref VPC

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-natgw-1-eip

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-natgw-1
    DependsOn: VPCGatewayAttachment

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route-table-1
      VpcId: !Ref VPC

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable1

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route-table-2
      VpcId: !Ref VPC

  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable2

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table-1
      VpcId: !Ref VPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table-2
      VpcId: !Ref VPC

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1 # NatGateway2 does not exist
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PublicEc2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: !Ref Ec2InstanceType
      KeyName: !Ref Ec2KeyName
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-ec2-1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          eval "$(ssh-agent)"

  PrivateEc2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: !Ref Ec2InstanceType
      KeyName: !Ref Ec2KeyName
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-ec2-1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          eval "$(ssh-agent)"

          sudo amazon-linux-extras install nginx1 -y
          sudo echo "Hello JAWS!" | sudo tee /usr/share/nginx/html/jaws.html
          sudo systemctl start nginx
    DependsOn: PrivateSubnetRouteTableAssociation1

  PrivateEc2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: !Ref Ec2InstanceType
      KeyName: !Ref Ec2KeyName
      SubnetId: !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-ec2-2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          eval "$(ssh-agent)"

          sudo amazon-linux-extras install nginx1 -y
          sudo echo "Hello JAWS!" | sudo tee /usr/share/nginx/html/jaws.html
          sudo systemctl start nginx
    DependsOn: PrivateSubnetRouteTableAssociation2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg # Optional
      Port: 80 # Optional
      Protocol: HTTP # Optional
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tg
      TargetType: instance # Optional
      Targets:
        - Id: !Ref PrivateEc2Instance1
          Port: 80 # Optional
        - Id: !Ref PrivateEc2Instance2
          Port: 80 # Optional
      VpcId: !Ref VPC # Optional

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-alb # Optional
      Scheme: internet-facing # Optional
#      SubnetMappings:
#        - SubnetId: !Ref PublicSubnet1
#        - SubnetId: !Ref PublicSubnet2
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
      Type: application # Optional

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup # Optional
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
